from googleapiclient.discovery import build
import pandas as pd
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import time
import os
#CREATING SERVICE OBJECT TO SEND REQUESTS TO GOOGLE CLOUD YOUTUBE API

api_key = 'AIzaSyBC9L6bk4V3fvpEVU9wacmT-315Z7mgPKU'
youtube= build('youtube', 'v3', developerKey= api_key)

##DEFINE FUNCTION TO SEARCH BY DATE

def search_vid(query, published_after, published_before, max_result=200):
    videos=[]
    request= youtube.search().list(
        q=query,
        part='snippet',
        type='video',
        maxResults=50,
        order='date',
        publishedAfter= published_after,
        publishedBefore= published_before
    )
    while request and len(videos)< max_result:
        response= request.execute()
        for item in response['items']:
            videos.append({
                'video_id':item['id']['videoId'],
                'title' :item['snippet']['title'],
                'published At': item['snippet']['publishedAt']
            })
##        request= youtube.search().list_next(request,response)
        time.sleep(0.5)
    return videos
##DeFINE FUNCTION TO FETCH VIDEO STATISTICS
def fetch_video_details(video_ids):
    video_data=[]
    for i in range(0, len(video_ids), 50):
        ids_chunk= video_ids[i:i+50]
        response= youtube.videos().list(
            part='snippet, statistics',
            id=','.join(ids_chunk)
        ).execute()

        for item in response['items']:
            stats= item.get('statistics',{})
            snippet= item.get('snippet',{})
            video_data.append({
                'video_id': item['id'],
                'title': snippet.get('title'),
                'publishedAt': snippet.get('publishedAt'),
                'channelTitle': snippet.get('channelTitle'),
                'tags':snippet.get('tags')
            })
        time.sleep(1)
    return video_data


##DEFINE FUNCTION TO FIND THE TRENDING VIDEOS

def collect_monthly_data(query, year, month):
    start_date= datetime(year,month,1)
    next_month= start_date + timedelta(days=32)
    next_month= datetime(next_month.year, next_month.month, 1)

    print(f"\nCollecting data for {start_date.strftime('%Y-%m')}")
    published_after=start_date.isoformat("T") + "Z"
    published_before=next_month.isoformat("T") + "Z"

    videos= search_vid(query, published_after, published_before, max_result=500)
    video_ids=[v['video_id'] for v in videos]
    details= fetch_video_details(video_ids)


    os.makedirs('data/monthly', exist_ok=True)
    df = pd.DataFrame(details)
    df.to_csv(f"data/monthly/AI_{start_date.strftime('%Y_%m')}.csv", index=False)
    print(f"Saved {len(df)} videos for {start_date.strftime('%Y-%m')}")


collect_monthly_data("AI", 2023, 12)
